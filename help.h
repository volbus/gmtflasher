
const char help_text[] =
"Usage: gmtflasher [option] -u <mcu> <command> [<args>] [<ihex_file>]\n"
"Options:\n"
"  -f          force, rewrite all, even if target memory already has the same content\n"
"  -h          print this help\n"
"  -o          output file, followed by name of output file in case of read commands\n"
"  -p          preserve, do not modify memory that is not defined in the input file\n"
"  -v          verbose, show more what's being done\n"
"  --help      print this help, same as -h\n"
"  --listmcu   print known ÂµCs (from xml definition file, this is a user editable list)\n"
"  --verbose   verbose, show more what's being done, same as -v\n"
"  --version   print version information\n"
"\n"
"Commands:\n"
"  -r    read all\n"
"  -rf   read flash memory\n"
"  -re   read eeprom memory\n"
"  -ro   read option bytes\n"
"  -rb   read byte, followed by address to be read\n"
"  -rw   read word, followed by address to be read\n"
"  -rr   read range, followed by address range in the form '0xPPPP:0xQQQQ' where 0xPPPP is\n"
"        the start address and 0xQQQQ is the end address\n"

"  -w    write all (*)\n"
"  -wf   write flash memory (*)\n"
"  -we   write eeprom memory (*)\n"
"  -wo   write option bytes (*)\n"
"  -wb   write byte, followed by address to be written and the byte value\n"
"  -ww   write word, followed by address to be written and the word value\n"

"  -ib   incrememt byte, followed by address to be incremented\n"
"  -iw   increment word, followed by address to be incremented\n"

"  -lo   lock, activate the ROP (read out protection)\n"
"  -ul   unlock, deactivate ROP, !will fully erase device!\n"
"\n"
"(*) - last argument is the data file, intel hex format, containing the data to be written. The file format is checked by contents, not extension.\n"
"\n"
"Multiple command arguments can be given, the processing order is the order in which they apper.\n"
"If a combination of the commands: -wf, -we, -wo; is used, they can only access data from the same input file, the last argument. In this case the required data needs to be assembled into the same file. During the multiple write commnads, the device is not reset, so writing the option bytes does not activate the new configuration until all commands are executed.\n"
"If the -w command is used, all defined data in the input file will be written. If the input file only contains the flash address range, the command is equivalent to -wf command.\n"
"Assembling all data into one file has the advantage of full device definition, not needing separate files for flash, eeprom and option bytes, and selective programming can be used.\n"
"When using the -o option with read commands, to define the output file, do not use multiple reads, as they will all rewrite the same file defined as output.\n"
"\n"
"Report bugs to cristian.gall@galmot.eu";
